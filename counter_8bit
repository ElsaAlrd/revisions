library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity Counter_8bit is
    Port (
        clk     : in STD_LOGIC;         -- Horloge
        reset   : in STD_LOGIC;         -- Reset asynchrone (prioritaire)
        enable  : in STD_LOGIC;         -- Activation du comptage
        up_down : in STD_LOGIC;         -- Sélection du mode (1 = up, 0 = down)
        load    : in STD_LOGIC;         -- Chargement d'une valeur initiale
        data_in : in STD_LOGIC_VECTOR(7 downto 0); -- Valeur de chargement
        count   : out STD_LOGIC_VECTOR(7 downto 0) -- Valeur du compteur
    );
end Counter_8bit;

architecture Behavioral of Counter_8bit is
    signal counter_reg : STD_LOGIC_VECTOR(7 downto 0);
begin
    process (clk, reset)
    begin
        if reset = '1' then  -- Reset asynchrone
            counter_reg <= (others => '0');
        elsif rising_edge(clk) then
            if load = '1' then
                counter_reg <= data_in;  -- Chargement de la valeur initiale
            elsif enable = '1' then
                if up_down = '1' then
                    counter_reg <= counter_reg + 1; -- Mode comptage croissant
                else
                    counter_reg <= counter_reg - 1; -- Mode comptage décroissant
                end if;
            end if;
        end if;
    end process;
    count <= counter_reg;  -- Assignation de la sortie
end Behavioral;
